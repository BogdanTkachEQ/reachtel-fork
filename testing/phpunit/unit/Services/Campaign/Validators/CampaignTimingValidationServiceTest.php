<?php
/**
 * @author phillip.berry@equifax.com
 * @copyright ReachTel (ABN 40 133 677 933)
 */

namespace testing\unit\Services\Campaign\Validators;

use Doctrine\Common\Collections\ArrayCollection;
use Models\CampaignSettings;
use Models\CampaignType;
use Services\Campaign\Validators\CampaignTimingValidationService;
use Services\Campaign\Validators\Disclaimers\TimingDisclaimerProvider;
use Services\Exceptions\Campaign\Validators\PublicHolidayValidationFailure;
use Services\Exceptions\Campaign\Validators\TimingRuleValidationFailure;
use Services\Validators\CampaignPublicHolidaySettingsValidator;
use Services\Validators\CampaignTimingRulesSettingsValidator;
use testing\unit\AbstractPhpunitUnitTest;

/**
 * Class CampaignTimingValidationServiceTest
 */
class CampaignTimingValidationServiceTest extends AbstractPhpunitUnitTest
{
	private $disclaimerProvider;
	private $campaignTimingRulesValidator;
	private $campaignPublicHolidayValidator;
	private $campaignSettings;

	/**
	 * @return void
	 */
	public function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->campaignPublicHolidayValidator = \Phake::mock(CampaignPublicHolidaySettingsValidator::class);
		$this->campaignTimingRulesValidator = \Phake::mock(CampaignTimingRulesSettingsValidator::class);
		$this->disclaimerProvider = \Phake::mock(TimingDisclaimerProvider::class);
		$this->campaignSettings = \Phake::mock(CampaignSettings::class);
	}

	/**
	 * @return array
	 */
	public function dateTimeProvider() {
		return [
			[new \DateTime("2019-01-01 01:00:00"), true, false, false],
			[new \DateTime("2019-01-01 12:00:00"), true, true, false],
			[new \DateTime("2019-12-25 01:00:00"), true, false, false],
			[new \DateTime("2019-12-26 01:00:00"), true, false, false],
			[new \DateTime("2019-12-26 12:00:00"), true, true, false],
			[new \DateTime("2019-01-10 12:00:00"), false, true, true],
			[new \DateTime("2019-01-10 01:00:00"), false, false, false],
		];
	}

	/**
	 * @dataProvider dateTimeProvider
	 * @param \DateTime $dateTime
	 * @param boolean   $isPublicHoliday
	 * @param boolean   $isValidTiming
	 * @param boolean   $expected
	 * @return void
	 */
	public function testIsValidDateTime(\DateTime $dateTime, $isPublicHoliday, $isValidTiming, $expected) {
		\Phake::when($this->campaignPublicHolidayValidator)->isValidDateTime(\Phake::anyParameters())->thenReturn(!$isPublicHoliday);
		\Phake::when($this->campaignPublicHolidayValidator)->setCampaignSettings(\Phake::anyParameters())->thenReturn($this->campaignPublicHolidayValidator);

		\Phake::when($this->campaignTimingRulesValidator)->isValidDateTime(\Phake::anyParameters())->thenReturn($isValidTiming);
		\Phake::when($this->campaignTimingRulesValidator)->setCampaignSettings(\Phake::anyParameters())->thenReturn($this->campaignTimingRulesValidator);

		\Phake::when($this->campaignSettings)->getRecurringTimes()->thenReturn(new ArrayCollection());
		\Phake::when($this->campaignSettings)->getType()->thenReturn(CampaignType::PHONE());

		$service = new CampaignTimingValidationService(
			$this->campaignPublicHolidayValidator,
			$this->campaignTimingRulesValidator,
			$this->disclaimerProvider
		);

		if ($isPublicHoliday) {
			$this->expectException(PublicHolidayValidationFailure::class);
		} elseif (!$isValidTiming) {
			$this->expectException(TimingRuleValidationFailure::class);
		}
		$this->assertEquals($expected, $service->isValidDateTime($dateTime, $this->campaignSettings));
	}

	/**
	 * @return void
	 */
	public function testGetDisclaimer() {
		\Phake::when($this->disclaimerProvider)->setCampaignSettings(\Phake::anyParameters())->thenReturn($this->disclaimerProvider);
		$service = new CampaignTimingValidationService(
			$this->campaignPublicHolidayValidator,
			$this->campaignTimingRulesValidator,
			$this->disclaimerProvider
		);
		$service->getDisclaimer($this->campaignSettings);
		\Phake::verify($this->disclaimerProvider, \Phake::times(1))->getDisclaimer();
	}

	/**
	 * @return array
	 */
	public function ruleProvider() {
		return [
			[CampaignType::PHONE(), true, true, false],
			[CampaignType::PHONE(), false, false, true],
			[CampaignType::PHONE(), false, true, true],
			[CampaignType::PHONE(), true, false, true],
			[CampaignType::EMAIL(), true, true, false],
			[CampaignType::SMS(), true, true, false],
			[CampaignType::WASH(), true, true, false],
		];
	}

	/**
	 * @dataProvider ruleProvider
	 * @param CampaignType $campaignType
	 * @param boolean      $publicHolidaySettingsValid
	 * @param boolean      $timingRulesValid
	 * @param boolean      $expected
	 * @return void
	 */
	public function testViolatesValidationRules(
		CampaignType $campaignType,
		$publicHolidaySettingsValid,
		$timingRulesValid,
		$expected
	) {
		\Phake::when($this->campaignPublicHolidayValidator)->isValid(\Phake::anyParameters())->thenReturn($publicHolidaySettingsValid);
		\Phake::when($this->campaignPublicHolidayValidator)->setCampaignSettings(\Phake::anyParameters())->thenReturn($this->campaignPublicHolidayValidator);

		\Phake::when($this->campaignTimingRulesValidator)->isValid(\Phake::anyParameters())->thenReturn($timingRulesValid);
		\Phake::when($this->campaignTimingRulesValidator)->setCampaignSettings(\Phake::anyParameters())->thenReturn($this->campaignTimingRulesValidator);

		\Phake::when($this->campaignSettings)->getRecurringTimes()->thenReturn(new ArrayCollection());
		\Phake::when($this->campaignSettings)->getType()->thenReturn($campaignType);

		$service = new CampaignTimingValidationService(
			$this->campaignPublicHolidayValidator,
			$this->campaignTimingRulesValidator,
			$this->disclaimerProvider
		);
		$this->assertEquals($expected, $service->violatesValidationRules($this->campaignSettings));
	}
}
