<?php
/**
 * @author phillip.berry@equifax.com
 * @copyright ReachTel (ABN 40 133 677 933)
 */

namespace testing\module\Services;

use Services\Email\Dkim\DkimKeyFactory;
use Services\Email\Dkim\DkimKeyResolver;
use Services\Email\Dkim\DkimKeystoreFactory;
use Services\Email\Dkim\GroupDkimKeystore;
use Services\Email\Dkim\RSADkimKeyGenerator;
use Services\Email\Dkim\SystemDkimKeystore;
use testing\module\AbstractDatabasePhpunitModuleTest;
use testing\module\helpers\UserModuleHelper;

/**
 * Class DkimKeystoreModuleTest
 */
class DkimKeyResolverModuleTest extends AbstractDatabasePhpunitModuleTest
{
	use UserModuleHelper;

	public $groupId1;
	public $groupId2;

	/**
	 * @return void
	 */
	public function setUp()	{
		parent::setUp(); // TODO: Change the autogenerated stub
		if (!defined('EMAIL_DEFAULT_DOMAIN')) {
			define('EMAIL_DEFAULT_DOMAIN', 'reachtel.com.au');
		}
	}

	/**
	 * @return void
	 */
	public function test_campaign_key() {

		$this->mock_function_param_value(
			'api_groups_checkidexists',
			[
				['params' => [1000], 'return' => true],
			],
			false
		);

		$this->mock_function_param_value(
			'api_campaigns_setting_getsingle',
			[
				['params' => [900, "dkim"], 'return' => "campaignselector"],
			],
			false
		);

		$keyStore = new GroupDkimKeystore(1000, "campaignselector", new DkimKeyFactory());
		$this->assertTrue($keyStore->saveKey((new RSADkimKeyGenerator())->createKey(new DkimKeyFactory())));

		$dkim_key_resolver = new DkimKeyResolver(new DkimKeystoreFactory(), new DkimKeyFactory());
		$dkim_key_resolver
			->setCampaign(900, 1000)
			->setFromEmail("test@reachtel.com.au")
			->setDefaultDomain(EMAIL_DEFAULT_DOMAIN, api_system_setting_getsingle("EMAIL_DEFAULT_DKIM_SELECTOR"))
			->resolve();

		$dkim_selector = $dkim_key_resolver->getResolvedDkimSelector();
		$this->assertEquals($dkim_selector, "campaignselector");
		$this->assertEquals($keyStore->getDkimKey()->exportPublic(), $dkim_key_resolver->getResolvedKey()->exportPublic());

		$keyStore->deleteKey();
	}

	/**
	 * @return void
	 */
	public function test_group_key() {

		$this->mock_function_param_value(
			'api_groups_checkidexists',
			[
				['params' => [1000], 'return' => true],
			],
			false
		);

		$this->mock_function_param_value(
			'api_campaigns_setting_getsingle',
			[
				['params' => [900, "dkim"], 'return' => false],
			],
			false
		);

		$systemKeyStore = new SystemDkimKeystore("testsystem500", new DkimKeyFactory());
		$this->assertTrue($systemKeyStore->saveKey((new RSADkimKeyGenerator())->createKey(new DkimKeyFactory())));

		$keyStore = new GroupDkimKeystore(1000, "campaignselector", new DkimKeyFactory());
		$keyStore->setSystemKey("testsystem500");

		$dkim_key_resolver = new DkimKeyResolver(new DkimKeystoreFactory(), new DkimKeyFactory());
		$dkim_key_resolver
			->setCampaign(900, 1000)
			->setFromEmail("test@reachtel.com.au")
			->setDefaultDomain(EMAIL_DEFAULT_DOMAIN, api_system_setting_getsingle("EMAIL_DEFAULT_DKIM_SELECTOR"))
			->resolve();

		$dkim_selector = $dkim_key_resolver->getResolvedDkimSelector();
		$this->assertEquals($dkim_selector, "campaignselector");

		$this->assertEquals($systemKeyStore->getDkimKey()->exportPublic(), $dkim_key_resolver->getResolvedKey()->exportPublic());

		$keyStore->removeSystemKey();
		$systemKeyStore->deleteKey();
	}

	/**
	 * @return array
	 */
	public function test_default_key_provider() {
		return [
			["test@reachtel.com.au", true],
			["support@reachtel.com.au", true],
			["\<Support\> support@reachtel.com.au", true],
			["support@rchtel.com.au", false],
		];
	}

	/**
	 * @param string $email
	 * @param string $default
	 * @return void
	 * @dataProvider test_default_key_provider
	 */
	public function test_default_key($email, $default) {

		$this->mock_function_param_value(
			'api_groups_checkidexists',
			[
				['params' => [1000], 'return' => true],
			],
			false
		);

		$this->mock_function_param_value(
			'api_campaigns_setting_getsingle',
			[
				['params' => [900, "dkim"], 'return' => false],
			],
			false
		);

		$systemKeyStore1 = new SystemDkimKeystore("testsystem499", new DkimKeyFactory());
		$systemKeyStore2 = new SystemDkimKeystore("testsystem500", new DkimKeyFactory());
		$systemKeyStore3 = new SystemDkimKeystore("testsystem501", new DkimKeyFactory());
		$this->assertTrue($systemKeyStore1->saveKey((new RSADkimKeyGenerator())->createKey(new DkimKeyFactory())));
		$this->assertTrue($systemKeyStore2->saveKey((new RSADkimKeyGenerator())->createKey(new DkimKeyFactory())));
		$this->assertTrue($systemKeyStore3->saveKey((new RSADkimKeyGenerator())->createKey(new DkimKeyFactory())));

		$dkim_key_resolver = new DkimKeyResolver(new DkimKeystoreFactory(), new DkimKeyFactory());
		$dkim_key_resolver
			->setCampaign(900, 1000)
			->setFromEmail($email)
			->setDefaultDomain(EMAIL_DEFAULT_DOMAIN, "testsystem500")
			->resolve();

		$dkim_selector = $dkim_key_resolver->getResolvedDkimSelector();

		if ($default) {
			$this->assertEquals("testsystem500", $dkim_selector);
			$this->assertEquals(
				$systemKeyStore2->getDkimKey()->exportPublic(),
				$dkim_key_resolver->getResolvedKey()->exportPublic()
			);
		} else {
			$this->assertEquals(null, $dkim_selector);
			$this->assertEquals(null, $dkim_key_resolver->getResolvedKey());
		}

		$systemKeyStore1->deleteKey();
		$systemKeyStore2->deleteKey();
		$systemKeyStore3->deleteKey();
	}
}
